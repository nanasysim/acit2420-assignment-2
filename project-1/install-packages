#!/bin/bash
# This script will install pacakges from a file

# Check if user is running the script with sudo
if [[ ! $EUID == 0 ]]; then # [4] EUID is the effective user ID of the current user running the script. If the EUID is not equal to 0, it means that the script is not running as root.
    echo "$0 is not running as root. Please use sudo."
    exit 2
fi

# Set the user home directory
USER_HOME="/home/$SUDO_USER" 
HOME=$USER_HOME

# Update the package database to the latest version
echo "Updating package database..."
if ! pacman -Syu; then # [4] 
    echo "Error: Failed to update package database" >&2 # [5] >&2 is used to redirect the output to stderr
    exit 1
fi

# Check if packages file exists
home_directory="$HOME"
packages_file="$home_directory/packages"
if [[ ! -f "$home_directory/packages" ]]; then 
    echo "Error: packages file does not exist." >&2 # [5]
# Create a default packages file
    cat > "$packages_file" <<- EOL
kakoune
tmux
EOL
    echo "A default packages file has been created at $packages_file. Please add your own packages and run the script again."
    exit 1
fi

# Install the packages from the file using the following steps:
    # a. Read the packages file line by line
    # b. Check if the package is already installed
    # c. If the package is not installed, install the package
    # d. Print "Installing $package..."
    # e. If the package is installed successfully, print "Installed $package"
    # f. If the package fails to install, print "Error: Failed to install $package" and exit with status 1
    # g. If the package is already installed, print "$package is already installed.
while IFS= read -r package; do # [3] IFS is used to set the Internal Field Separator to newline. read -r is used to read the input line by line.
    if ! pacman -Qi "$package" &> /dev/null; then # [4] -Qi is used to query information about a package. &> /dev/null is used to redirect the output to /dev/null.
        echo "Installing $package..."
        if pacman -S --noconfirm "$package"; then # [4] --noconfirm is used to install the package without asking for confirmation. This skips the step of asking the user to confirm the installation by typing "y".
            echo "Installed $package"
        else
            echo "Error: Failed to install $package" >&2 # [5]
            exit 1
        fi
    else
        echo "$package is already installed."
    fi
done < "$home_directory/packages"

# Print success message
echo "Successfully installed all packages"

# Exit with status 0
exit 0

# Referenences:
# [1] https://linuxize.com/post/bash-check-if-file-exists/
# [2] https://www.howtogeek.com/442332/how-to-work-with-variables-in-bash/
# [3] https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Word-Splitting
# [4] https://wiki.archlinux.org/title/Pacman
# [5] https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Appending-Standard-Output-and-Standard-Error