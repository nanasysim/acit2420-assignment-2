#!/bin/bash
# This script will set up the project environment
# Users will be able to install packages, clone the starting files and create symbolic links to configuration files

# To ensure that user is running the script with sudo
if [ ! $EUID == 0 ]; then # [1] EUID is the effective user ID of the current user running the script. If the EUID is not equal to 0, it means that the script is not running as root.
    echo "$0 is not running as root. Please use sudo."
    exit 2
fi

# Set the user home directory
USER_HOME="/home/$SUDO_USER"
HOME=$USER_HOME # Set the HOME environment variable to the user's home directory

# Usage function to display the usage of the script
usage() {
    usage_message="
\n\nCOMMAND STRUCTURE:\n 
    sudo ./setup [OPTIONS] [USERNAME]\n\n

OPTIONS:\n
    -h    Display the help message\n
    -i    Install packages\n
    -c    Clone starting files repository and   create symbolic links to configuration files\n
    -b    Both install packages and clone starting files repository and create symbolic links to configuration files\n\n"
    
    echo -e $usage_message # [3] -e is used to enable interpretation of backslash escapes
    exit 1 # Exit with status 1
}

# Make a getopts to make user choose which option to install first
while getopts ":hicb" opt; do
    case $opt in
        h)
            usage # Display the usage message
            ;;
        i)
            echo "Installing packages..."
            INSTALL_PACKAGES=true
            ./install-packages # Run the install-packages script
            ;;
        c)
            echo "Cloning starting files repository and creating symbolic links to configuration files..."
            CONFIG_FILES=true
            ./config-files # Run the config-files script
            ;;
        b)
            echo "Installing packages and cloning starting files repository and creating symbolic links to configuration files..."
            INSTALL_PACKAGES=true
            CONFIG_FILES=true
            ./install-packages # Run the install-packages script
            ./config-files # Run the config-files script
            ;;
        ?)
            echo "Invalid option: -$OPTARG" >&2 # [2] >&2 is used to redirect the output to stderr 
            usage  # Display the usage message
            ;;
    esac
done

# Check if no options are provided
if [ $OPTIND == 1 ]; then
    echo "No options provided. Please provide an option." >&2 # [2]
    usage # Display the usage message
fi
echo "Successfully completed system setup"

# Exit with status 0
exit 0 
# References:
# [1] https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Bash-Variables
# [2] https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Appending-Standard-Output-and-Standard-Error
# [3] https://code2care.org/howto/add-newline-character-bash-script-string/#:~:text=You%20can%20make%20use%20of%20the%20n%20character,it%20platform%20independent.%20echo%20-e%20%22nHello%21nHow%20are%20you%3F%22